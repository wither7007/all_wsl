
removeL(b)
b=qs('button')
removeL(b)
qs('button').addEventListener('click',()=>log('newc'))
qs('button')
b
b.addEventListener('click',()=>log('click'))
removeL(b)
tar(b)
b
removeL=(tar)=>{tar.replaceWith(tar.cloneNode(true));}
b.addEventListener('click',()=>log('click'))
document.body.prepend(b)
b.textContent='copy'
b=document.createElement('button')
qs('button')
b
b.addEventListener("click", () => log('kkk'));
b.addEventListener("click", () => log('kkk');
b
b.addEventListener("click", () => writeClipboardText("peek"));
b.replaceWith(b.cloneNode(true));
b.addEventListener("click", () => writeClipboardText("pee"));
b.addEventListener("click", () => writeClipboardText("poop"));
b.addEventListener("dblclick", () => writeClipboardText("new"));
b.addEventListener("click", () => writeClipboardText("<empty clipboard>"));
b
button
async function writeClipboardText(text) {  try {    await navigator.clipboard.writeText(text);  } catch (error) {    console.error(error.message);  }}
b
b.textContent='button'
document.body.prepend(b)
b=document.createElement('button')
writeClipboardText('hello')
async function writeClipboardText(text) {  try {    await navigator.clipboard.writeText(text);  } catch (error) {    console.error(error.message);  }}
qa('img').forEach(a=>log(a))
qa('img')
copy($0.href)
$0.href
$0
document.querySelector('div').style="width: 20px; height: 20px; color: red;"
document.querySelector('body').style="div { width: 20px; height: 20px; color: red; }"
document.querySelector('body').style=div { width: 20px; height: 20px; color: red; }
document.querySelector('body').style="div { width: 20px; height: 20px; }"
qa('div')
qa('img')
document.querySelector('body').style="DIV { width: 20px; height: 20px; }"
document.querySelector('body').style="img { width: 20px; height: 20px; }"
document.querySelector('body').style="border-top: 100px solid black; border-bottom: 200px solid pink;"
document.querySelector('body').style="border-top: 100px solid black"
document.querySelector('body').style="border-top: 400px solid black"
document.querySelector('body').style="border-top: 100px solid black"
metaTags
const metaTags = document.getElementsByTagName('meta');
document.body.querySelectorAll('*')
document.body
af(document.head.children).forEach(a=>log(a))
document.head.children
hrm()
injectCSS(c)
c=`body {\tfont-family: verdana, arial, sans-serif ;\tfont-size: 18px ;}`
window.injectCSS = css => {    let el = document.createElement('style');    el.type = 'text/css';    el.innerText = css;    document.head.appendChild(el);    return el;};
copy(yy)
yy=ax.split(' ').sort()
window.CanadianProvinces
ax.split(' ').sort()
ax.split(' ')
ax.sort()
ax
for (a in window) {ax+=(`${a} `)}
ax=''
for (a in window) {log(a)}
window.location.url
window.location.reload()
hrm()
const injectCSS = css => {    let el = document.createElement('style');    el.type = 'text/css';    el.innerText = css;    document.head.appendChild(el);    return el;};injectCSS('body { background-color: #fff }');injectCSS('img { width: 20px; height: 20px; }')
injectCSS('img { width: 20px; height: 20px; }')
const injectCSS = css => {    let el = document.createElement('style');    el.type = 'text/css';    el.innerText = css;    document.head.appendChild(el);    return el;};injectCSS('body { background-color: #fff }');
copy(hout)
myht()
help()
const injectCSS = css => {  let el = document.createElement('style');  el.type = 'text/css';  el.innerText = css;  document.head.appendChild(el);  return el;};injectCSS('body { background-color: #fff }');injectCSS('img { width: 20px; height: 20px; }')
hrm()
help
qa
injectCSS('body { background-color: #fff }');
const injectCSS = css => {  let el = document.createElement('style');  el.type = 'text/css';  el.innerText = css;  document.head.appendChild(el);  return el;};injectCSS('body { background-color: #000 }');injectCSS('img { width: 20px; height: 20px; }')
const injectCSS = css => {  let el = document.createElement('style');  el.type = 'text/css';  el.innerText = css;  document.head.appendChild(el);  return el;};injectCSS('body { background-color: #000 }');
mycon=`body {    background-color: #f00;}`
    var style = document.createElement("style");    style.type = "text/css";
document.querySelectorAll('link[rel="stylesheet"]')[1].remove()
document.querySelectorAll('link[rel="stylesheet"]')[1]
document.querySelectorAll('link[ref="stylesheet"]');
document.querySelectorAll('link[ref="stylesheet"]')
document.querySelectorAll('link[rel="stylesheet"]');
document.querySelectorAll('link[ref="stylesheet"]');
boxes
const boxes = document.querySelectorAll('link[ref="style"]');
qs('[ref]')
qs('body').style.cssText='img: width:2px'
qa('style')
document.head.querySelectorAll('link')
document.head.querySelectorAll('style')
copy(hout)
myht()
document.body.remove()
copy(hout)
myht()
help()
hrm()
document.styleSheets[0].parent
document.styleSheets[0].parentStyleSheet
document.styleSheets[0]
document.styleSheets
o[0]
o[1]
o.sort()
o[1]
o
o.forEach(a=>log(a))
o=Object.entries(fr)
o=Object.entries(fr).join('\')
copy(Object.entries(fr).join('\'))
copy(Object.entries(fr))
Object.entries(fr)[1]
Object.entries(fr)
fr
fr=frequencies(all)
new=frequencies(all)
all
frequencies(all)
all=af(document.querySelectorAll('*')).map(a=>a.tagName)
af(document.querySelectorAll('*')).map(a=>a.tagName)
document.querySelectorAll('*').map(a=>a.tagName)
document.body.querySelectorAll('script')
document.head.querySelectorAll('script')
document.head.querySelector('script')
document.head.children
document.head
document.styleSheets
hrm
hrm()
help()
qa
help()
copy(style)
af(document.styleSheets).forEach(a=>style+=(a.href)+'\')
style=''
af(document.styleSheets).forEach(a=>style+=(a.href)+'\')
style
af(document.styleSheets).forEach(a=>style+=(a.href))
style=''
af(document.styleSheets).forEach(a=>log(a.href))
af(document.styleSheets)
document.styleSheets[2]
document.styleSheets
copy(qs('head').outerHTML)
hrm()
help()
let help = () => {    console.log('hrm-remove head\myht-copy html to hout')}
help()
let help = () => {    console.log('hrm-remove head\ myht-copy html to hout')}
help()
let help = () => {    console.log('hrm-remove head, myht-copy html to hout')}
copy($0.href)
[...document.styleSheets]
qs('head').remove()
qs('head').remove
[...document.styleSheets]
document.styleSheets[0].removeRule()
document.styleSheets[0].removeRule
[...document.styleSheets]
removeStylesheet()
\t\tfunction removeStylesheet() {\t\t\tdocument.head.querySelector( "style" )\t\t\t\t?.remove()\t\t\t;\t\t}
[...document.styleSheets]
[...document.styleSheets].forEach(a=>a.remove)
[...document.styleSheets][1].remove()
[...document.styleSheets][1].remove
[...document.styleSheets]
[...document.styleSheets].forEach(a=>a.remove)
[...document.styleSheets].forEach(a=>a.remove))
qs('style').remove()
qs('style').outerHTML
qa('style')
copy(ss[0].href)
ss[0].href
ss[0]
ss[0].cssRules
ss[0]
ss.forEach(a=>log(a.href))
ss[1].href
ss[1].cssRules
ss[1]
ss=[...document.styleSheets]
copy($0.style.backgroundImage)
$0.style.backgroundImage.url
$0.style.backgroundImage
$0.style
$0.style.background-image
$0.style
$0.removeAttribute('class');
document.styleSheets.length
document.styleSheets
$0.classList.remove('banner-content');
$0.classList.remove('banner-heading');
$0.classList
$0.classLis
$0.classList.remove('banner-heading');
$0.classList.removeClass('banner-heading');
$0
$0.classList.removeClass('banner-heading')
$0.classList
$0.className
$0.cssText
$0.style
const myStyles = `    display: block;    width: 20px;    height: 20px;    background-color: red;    border: 2px;    font-size: 5em;    color: white;    margin: 20px;    padding-left: 10px;    padding-bottom: 10px;    border: 2px solid black;`;[...document.querySelectorAll('img')].forEach(a=>a.style.cssText=myStyles)
[...document.querySelectorAll('img')].forEach(a=>a.style.width='50px')
new Set([...qs('body').querySelectorAll('*')].map(a=>a.tagName))
[...qs('body').querySelectorAll('*')].map(a=>a.tagName)
qs('body').querySelectorAll('*').map(a=>a.tagName)
qs('body').querySelectorAll('*')
qs('body').style
document.styles
document.querySelector('svg')
document.querySelector('*').querySelectorAll('script').forEach(a=>log(a))
document.querySelector('*').querySelectorAll('script')
document.querySelector('*').querySelector('script')
document.querySelector('*').querySelector('*')
document.querySelectorAll('*').querySelector('*')
qa('script')
document.querySelectorAll('*').querySelector('meta')
a
a.querySelector('link')
a=qa('*')
    copy(document.querySelector('head').outerHTML)
    copy(document.query('head').outerHTML)
copy(hout)
myht()
hrm()
hrm
hout
myht()
hout
new Set([...document.querySelectorAll('*')].map(a=>a.tagName)).sort().forEach(a=>log(a))
new Set([...document.querySelectorAll('*')].map(a=>a.tagName)).sort.forEach(a=>log(a))
new Set([...document.querySelectorAll('*')].map(a=>a.tagName)).forEach(a=>log(a))
new Set([...document.querySelectorAll('*')].map(a=>a.tagName))
[...document.querySelectorAll('*')].map(a=>a.tagName)
[...document.querySelectorAll('[class]')].map(a=>a.className)
document.querySelectorAll('[class]').map(a=>a.className)
document.querySelectorAll('[class]')
wtext
gfetch(h)
h=`${location.href}\\script.js`
h
h=`{$location.href}\\script.js`
copy(`curl ${location.href}`)
location.href
qa('script').forEach(a=>log(a))
qa('script')
qa('script').forEach(a=>log(a))
log
qs
qa('script').forEach(a.log(a))
qa('script')
ec = document.querySelectorAll('[class]')
document.querySelectorAll('*').querySelector('*')
document.querySelectorAll('*')
function listCSSClasses () {  let classes = new Set()  let elementsWithClasses = document.querySelectorAll('[class]')  for (let element of elementsWithClasses) {    for (let className of element.classList) {      classes.add(className)    }  }  return [...classes].sort()}console.log(  'The page has the following classes:\  .' +  listCSSClasses().join('\  .'))
new Set(af(ec).map(a=>a.className))
af(ec).map(a=>a.className)
ec.map(a=>a.className)
ec.forEach(a=>log(a.className))
ec.forEach(a=>log(a.class))
ec[1].classList
ec = document.querySelectorAll('[class]')
elementsWithClasses = document.querySelectorAll('[class]')
hr()
window.hr=()=>{    document.querySelector('head').remove()}
qs
qa
copy(hout)
myHt()
myHt(0
qs('head').remove()
copy(hout)
myHt()
qs('head').remove()
copy(hout)
hout
myHt()
myHt = () => { window.hout=document.querySelector('html').outerHTML }
g
myHt()
myHt = () => { window.hout=document.querySelector('html').outerHTML }
g=myHt()
g=myHT()
copy(myHt)
myHt = () => { return document.querySelector('html').outerHTML }
copy(qs('html').outerHTML)
