
new Set([...document.querySelectorAll('*')].map(a=>a.tagName)).sort().forEach(a=>log(a))
new Set([...document.querySelectorAll('*')].map(a=>a.tagName)).sort.forEach(a=>log(a))
new Set([...document.querySelectorAll('*')].map(a=>a.tagName)).forEach(a=>log(a))
new Set([...document.querySelectorAll('*')].map(a=>a.tagName))
[...document.querySelectorAll('*')].map(a=>a.tagName)
[...document.querySelectorAll('[class]')].map(a=>a.className)
document.querySelectorAll('[class]').map(a=>a.className)
document.querySelectorAll('[class]')
wtext
gfetch(h)
h=`${location.href}\\script.js`
h
h=`{$location.href}\\script.js`
copy(`curl ${location.href}`)
location.href
qa('script').forEach(a=>log(a))
qa('script')
qa('script').forEach(a=>log(a))
log
qs
qa('script').forEach(a.log(a))
qa('script')
ec = document.querySelectorAll('[class]')
document.querySelectorAll('*').querySelector('*')
document.querySelectorAll('*')
function listCSSClasses () {  let classes = new Set()  let elementsWithClasses = document.querySelectorAll('[class]')  for (let element of elementsWithClasses) {    for (let className of element.classList) {      classes.add(className)    }  }  return [...classes].sort()}console.log(  'The page has the following classes:\  .' +  listCSSClasses().join('\  .'))
new Set(af(ec).map(a=>a.className))
af(ec).map(a=>a.className)
ec.map(a=>a.className)
ec.forEach(a=>log(a.className))
ec.forEach(a=>log(a.class))
ec[1].classList
ec = document.querySelectorAll('[class]')
elementsWithClasses = document.querySelectorAll('[class]')
hr()
window.hr=()=>{    document.querySelector('head').remove()}
qs
qa
copy(hout)
myHt()
myHt(0
qs('head').remove()
copy(hout)
myHt()
qs('head').remove()
copy(hout)
hout
myHt()
myHt = () => { window.hout=document.querySelector('html').outerHTML }
g
myHt()
myHt = () => { window.hout=document.querySelector('html').outerHTML }
g=myHt()
g=myHT()
copy(myHt)
myHt = () => { return document.querySelector('html').outerHTML }
copy(qs('html').outerHTML)
copy(qs('html').outerHTML
qs('head').remove()
[...h.children].forEach(a=>log(a))
h.children
h=qs('head')
qa('head')
copy(qs('head>*'))
copy(qa('head>*'))
qa('head>*')
qa('head')
document.querySelector('head').remove()
qs('head')
copy(qs('html').outerHTML)
qs('head').remove()
qs('head').remove
copy(qs('head').querySelector('style').outerHTML)
qs('head').querySelector('style').outerHTML
qs('head').querySelector('style')
document.styleSheets[1]
document.styleSheets.[1]
document.styleSheets.length
document.styleSheets
qs('head').remove()
document.styleSheets
q.style.cssText=myStyles
const myStyles = `    display: block;    width: 80%;    background-color: red;    border: 2px;    font-size: 5em;    color: white;    margin: 20px;    padding-left: 10px;    padding-bottom: 10px;    border: 2px solid black;`;
q.style.backgroundColor='#ccc'
q.style.backgroundColor='#fff'
q.style.backgroundColor='red'
q.style.backgroundColor='f00'
q.style
q=qs('html')
qa('style')
qa('.card-section').forEach(a=>log(a.textContent))
qa('.card-section').forEach(a=>log(a))
qa('.card-section')
copy(qs('html').outerHTML)
qs('nav')
qa('nav').forEach(a=>a.remove())
qs('nav')
qa('nav').forEach(a=>a.replaceChildren())
qa('nav')
qs('nav')
qs('nav').replaceChildren()
qa('nav')
qs('nav')
qs('head').remove()
copy(qs('html').outerHTML)
qs('html').outerHTML
qs('head').remove()
qs('head')
qa('style')
qs('style').innerHTML=`body {margin:25px;color:red;}div.polaroid {  width: 80%;  background-color: black;  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);  margin-bottom: 25px;}div.container {  text-align: center;  padding: 10px 20px;}`
qs('style').innerHTML=`body {margin:25px;}div.polaroid {  width: 80%;  background-color: black;  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);  margin-bottom: 25px;}div.container {  text-align: center;  padding: 10px 20px;}`
qs('style').innerHTML='body {margin:25px;}div.polaroid {  width: 80%;  background-color: black;  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);  margin-bottom: 25px;}div.container {  text-align: center;  padding: 10px 20px;}'
copy(qs('style').innerHTML)
qs('style').innerHTML
qs('style')
copy($0.href)
qa('.expanded')
qa('.button')
$0.className
copy(mm)
mm
qa('a').forEach(a=>mm.push(a.outerHTML))
mm=[]
qa('a').forEach(a=>log(a.outerHTML))
qa('a').forEach(a=>log(a.innerHTML))
copy(mm)
qa('a').forEach(a=>mm.push(a.innerHTML))
mm=[]
copy(mm)
qa('a').forEach(a=>mm.push(a))
mm=[]
qa('a').forEach(a=>log(a))
qa('a').forEach(a=>log(a.textContent))
qa('a').forEach(a=>log(a))
qa('a')
[...qa('*')][1]
[...qa('*')]
[...qs('*')]
qs('html').outerHTML
qa('head').forEach(a=>a.remove())
qa('script').forEach(a=>a.remove())
qa('img').forEach(a=>a.remove())
log(qa('style')[0].textContent)
qa('style')[0].textContent
qa('style')[0].outerHTML
qa('style')[0]
qa('style')
qs('head')
qs(head).children
qa('head')
elements = [ ...document.querySelectorAll("*:not(script, svg, meta, link,html,div)") ];
elements = [ ...document.querySelectorAll("*:not(script, svg, meta, link,html)") ];
elements = [ ...document.querySelectorAll("*:not(script, svg, meta, link)") ];
elements = [ ...document.querySelectorAll("*:not(script, svg, meta)") ];
elements = [ ...document.querySelectorAll("*:not(script, svg)") ];
elements = [ ...document.querySelectorAll("*:not(script)") ];
window.elements = [  ...document.querySelectorAll("*:not(svg)"),];
window.elements = [  ...document.querySelectorAll("*:not(script)"),];
qa('*').filter(a=>a.tagName==='SCRIPT')
qa('*').filter(a=>a.tagName.toLowerCase==='script')
qa('*').map(a=>a.tagName)
qa('*').filter(a=>a.tagName==='script')
qa('*').filter(a=>a.tagName=='script')
qa('*').filter(a=>a.tagName='script')
qa('script').forEach(a=>log(a))
qa('script')
Object.values(box.attributes).forEach(a=>log(a))
Object.values(box.attributes)
box=qs('.box')
qs('bod'y).outerHTML
refs
refs = [  ...document.querySelectorAll(`[data-name*="funnel-chart-percent"]`),];
qs('.center').children
qs('.box').children
qs('.box')
myt
all.forEach(a=>console.log(a))
all
all.forEach(a=>console.log(a))
Array.isArray(all)
all
myt[5]
all = [...document.querySelectorAll("*:not(head, style, noscript, script, meta,html, svg)")]
all.map(a=>x)
all=document.querySelectorAll("*:not(head, style, noscript, script, meta,html, svg)")
myt
mt
document.querySelectorAll("*:not(head, style, noscript, script, meta,html, svg)")
document.write(`<!DOCTYPE html><html><head></head><body>  <input type="text" id="textInput" placeholder="Press Enter...">  <script>    const textInput = document.getElementById('textInput');    textInput.addEventListener('keydown', (event) => {      if (event.key === 'Enter') {        console.log('Enter key pressed!');        // Perform desired actions here      }    });  </script></body></html>`)
document.write('jjj')
document.write(jjj)
jjj
jjj=`<!DOCTYPE html><html><head></head><body>  <input type="text" id="textInput" placeholder="Press Enter...">  <script>    const textInput = document.getElementById('textInput');    textInput.addEventListener('keydown', (event) => {      if (event.key === 'Enter') {        console.log('Enter key pressed!');        // Perform desired actions here      }    });  </script></body></html>`
jjj=`<!DOCTYPE html><html><head></head><body>  <input type="text" id="textInput" placeholder="Press Enter...">  <script>    const textInput = document.getElementById('textInput');    textInput.addEventListener('keydown', (event) => {      if (event.key === 'Enter') {        console.log('Enter key pressed!');        // Perform desired actions here      }    });  </script></body></html>```
jjj=22
jjj
jj='''<!DOCTYPE html><html><head></head><body>  <input type="text" id="textInput" placeholder="Press Enter...">  <script>    const textInput = document.getElementById('textInput');    textInput.addEventListener('keydown', (event) => {      if (event.key === 'Enter') {        console.log('Enter key pressed!');        // Perform desired actions here      }    });  </script></body></html>'''
document.write('<!DOCTYPE html><html><head></head><body>  <input type="text" id="textInput" placeholder="Press Enter...">  <script>    const textInput = document.getElementById('textInput');    textInput.addEventListener('keydown', (event) => {      if (event.key === 'Enter') {        console.log('Enter key pressed!');        // Perform desired actions here      }    });  </script></body></html>')
new Set([...document.querySelectorAll("*:not(style, noscript, script, meta,html, svg)")].map(a=>a.tagName))
[...document.querySelectorAll("*:not(style, noscript, script, meta,html, svg)")].map(a=>a.tagName)
copy(myt)
myt=''document.querySelectorAll("*:not(head, style, noscript, script, meta,html, svg)").forEach(a=>myt+=(a.outerHTML))
[...document.querySelectorAll("*:not(style, noscript, script, meta,html, svg)")].map(a=>a.tagName)
qs('head').remove()
[...document.querySelectorAll("*:not(style, noscript, script, meta,html, svg)")].map(a=>a.tagName)
document.querySelectorAll("*:not(style, noscript, script, meta,html, svg)").map(a=>a.tagName)
copy(myt)
myt=''document.querySelectorAll("*:not(style, noscript, script, meta,html, svg)").forEach(a=>myt+=(a.outerHTML))
af(ff).map(a=>a.tagName)
ff
ff.map(a=>a)
ff=document.querySelectorAll("*:not(style, script, meta,html, svg)")
myt=''document.querySelectorAll("*:not(style, script, meta,html, svg)").forEach(a=>myt+=(a.outerHTML))
qa('script')
qa
copy(myt)
myt=''document.querySelectorAll("*:not(style, script, meta,html, svg)").forEach(a=>myt+=(a.outerHTML))
copy(myt)
log(myt)
myt
myt=''document.querySelectorAll("*:not(style, script, meta,html)").forEach(a=>myt+=(a.outerHTML))
log(myt)
myt
myt=[]document.querySelectorAll("*:not(style, script, meta,html)").forEach(a=>myt.push(a.outerHTML))
myt
myt=[]document.querySelectorAll("*:not(style, script, meta,html)").forEach(a=>myHt.push(a.outerHTML))
myHt
mHt
copy(myHt.split('\'))
copy(myHt)
myHt
myHT
myHt=[]document.querySelectorAll("*:not(style, script, meta,html)").forEach(a=>myHt.push(a.outerHTML))
copy(document.querySelectorAll("*:not(style, script, meta,html)").forEach(a=>log(a.outerHTML)))
document.querySelectorAll("*:not(style, script, meta,html)").forEach(a=>log(a.outerHTML))
document.querySelectorAll("*:not(style, script, meta,html)")
window.elements = [  ...document.querySelectorAll("*:not(style, script, meta,html)"),];
window.elements = [  ...document.querySelectorAll("*:not(style, script, meta)"),];
window.elements = [  ...document.querySelectorAll("*:not(style, script)"),];
window.elements = [  ...document.querySelectorAll("*:not(style)"),];
qs
wtext
gfetch('https://raw.githubusercontent.com/wither7007/htmlTemplate/main/html/global.js')
let gfetch = async (yyy) => {  let response = await fetch(yyy)  window.wtext = await response.text()  console.log(wtext)}
var a = 458; // First numbervar b = 458;  // Second number var gcd; // Variable to store the Greatest Common Divisor (GCD)// Iterative loop to find GCD using Euclidean algorithmwhile (a != b) {    // If 'a' is greater than 'b', subtract 'b' from 'a'    if (a > b) {        a = a - b;    } else {        // If 'b' is greater than 'a', subtract 'a' from 'b'        b = b - a;    }}// The GCD is stored in 'a'gcd = a;// Output the calculated GCDconsole.log(gcd); 
var a = 448; // First numbervar b = 458;  // Second number var gcd; // Variable to store the Greatest Common Divisor (GCD)// Iterative loop to find GCD using Euclidean algorithmwhile (a != b) {    // If 'a' is greater than 'b', subtract 'b' from 'a'    if (a > b) {        a = a - b;    } else {        // If 'b' is greater than 'a', subtract 'a' from 'b'        b = b - a;    }}// The GCD is stored in 'a'gcd = a;// Output the calculated GCDconsole.log(gcd); 
var a = 2154; // First numbervar b = 458;  // Second number var gcd; // Variable to store the Greatest Common Divisor (GCD)// Iterative loop to find GCD using Euclidean algorithmwhile (a != b) {    // If 'a' is greater than 'b', subtract 'b' from 'a'    if (a > b) {        a = a - b;    } else {        // If 'b' is greater than 'a', subtract 'a' from 'b'        b = b - a;    }}// The GCD is stored in 'a'gcd = a;// Output the calculated GCDconsole.log(gcd); 
        a = a - b;
2%7
2%6
var x, y, chr;// Outer loop for rowsfor (x = 1; x <= 6; x++) {    // Inner loop for characters in each row    for (y = 1; y < x; y++) {        // Accumulate asterisks in the 'chr' variable        chr = chr + ("*");    }    // Print the accumulated characters for the current row    console.log(chr);    // Reset 'chr' for the next row    chr = '';} 
for (t=0;t<26;t++) {chr = chr +('*')}
chr=''
for (t=0;t<26;t++) {chr = chr +('*')}
var chr
for (t=0;t<26;t++) {chr = chr +('*')}
let chr
for (t=0;t<26;t++) {chr = chr +('*')}
let chr
for (t=0;t<26;t++) {chr = chr +('*')}
chr
for (t=0;t<6;t++) {chr = chr +('*')}
chr
for (t=0;t<6;t++) {chr = chr +('*')}
chr=chr+('*')
chr
var x, y, chr;// Outer loop for rowsfor (x = 1; x <= 6; x++) {    // Inner loop for characters in each row    for (y = 1; y < x; y++) {        // Accumulate asterisks in the 'chr' variable        chr = chr + ("*");    }    // Print the accumulated characters for the current row    console.log(chr);    // Reset 'chr' for the next row    chr = '';} 
chr
chr = chr + ("*");
var chr
ccc
ccc=ccc+'*'
ccc
ccc+='*'
let ccc
ccc+='*'
for (m=1;m<5;m++){console.log(m)}
a
for (a=1;a<5;a++) {chr+='*'}
for (a=1;a<5;) {chr=+'*'}
for (i = 0; i < 3; i++)    for (x = 0; x < i; i++) { console.log(i) }
for (i=0;i<3;i++){console.log(i)}
large(20,3)
large(2,3)
function large(x,y){    if (x>y) {        return x    }    else {        return y    }}
v
p
v=p??'non'
p===null
p==null
let p
''==null
''===null
s=obj.income||2
s
s=obj.income??2
obj.income
let obj={    name: "Rachel",    age: 17}
typeof sam==='undefined'
sam=2
