
article
const article = document.querySelector(\"article\");
copy(qs('html').outerHTML)
qs('html').outerHTML
qs('document')
x.remove()
x=qs('.poem')
x=qs('#poem')
copy(location.href)
location.href
copy($0.parentElement.href)
$0.parentElement.href
$0.parentElement
$0.children
copy(qs('html'))
qs('html')
qa('img').forEach(a=>a.remove())
document.querySelector('input[name=\"pwd\"]').checked
document.querySelector('input[name=\"selectedGameTypes[]\"]');
$0.name
document.querySelector('input[name=\"pwd\"]');
querySelector('input[name=\"pwd\"]');
document.querySelectorAll('input[type=\"checkbox\"]')
document.querySelectorAll('input[type=\"checkbox\"])
qa('input')
$0.checked=true
$0
qs('#amount').value='allWinners'
qs('#amount')
qa
url='https://www.mnlottery.com/winners/game'\nlocation.href=url\n
location.href
location.href=url
url='https://www.mnlottery.com/winners/game'\nwindow.open(url);\n
location.href
document.querySelector('#amount')
document.querySelector('#amount').value='allWinners'
qs('#amount').value='allWinners'
url='https://www.mnlottery.com/winners/game'\nwindow.open(url);\n
window.open(\"https://www.mozilla.org/\");
window.open(\"https://www.mozilla.org/\", \"mozillaTab\");
copy(location.href)
location.href
$0
qs('#amount').value='allWinners'
qs('#amount')
qs('#loadMore').click()
qa('#loadMore').click()
qa('#loadMore')
qa('#loadmore')
he
qa('head>*').forEach(a=>he.push(a.outerHTML.slice(0,100)))
he=[]
qa('head>*')
document.querySelectorAll('.load-more')[0].click()
document.querySelectorAll('.load-more')[0]
document.querySelectorAll('.load-more')
[...document.querySelectorAll('.card-content')].forEach(a=>console.log(a.textContent))
[document.querySelectorAll('.card-content')][1]
[document.querySelectorAll('.card-content')].forEach(a=>console.log(a.textContent))
[document.querySelectorAll('.card-content')].forEach(a=>console.log(a.text))
[document.querySelectorAll('.card-content')]
[document.querySelectorAll('.card_content')]
document.querySelectorAll('.card-section')
document.querySelectorAll('.card-content')
copy([...document.querySelectorAll('img')].map(a=>a.src).join('\\n'))
copy([...document.querySelectorAll('img')].map(a=>a.src).join(''))
[...document.querySelectorAll('img')].map(a=>a.src)
[...document.querySelectorAll('img')].map(a=a.src)
document.querySelectorAll('img')
qa('img')
document.querySelector('head').querySelectorAll('style')
document.querySelector('head').querySelector('style')
qa('head').querySelector('style')
he.length
copy(he.join('\\n'))
he
qa('head>*').forEach(a=>he.push(a.outerHTML.slice(0,100)))
he=[]
qa('head>*').forEach(a=>log(a.outerHTML.slice(0,100)))
qa('head>*').forEach(a=>log(a.innerHTML.slice(0,100)))
qa('head>*').forEach(a=>log(a.tagName))
qa('head>*').forEach(a=>log(a.textContent))
qa('head')
qa('head>*').forEach(a=>log(a))
qa('head>*')
qs('head>*')
qs('head.*')
qs('head')
qa('head>.*')
qa('head.*')
copy(qa('img').filter(a=>a.src.includes('gif')).map(a=>a.src).join('\\n'))
qa('img').filter(a=>a.src.includes('gif')).map(a=>a.src)
qa('img').filter(a=>a.src.includes('gif'))
qa('img')
copy($0.src)
$0.src
$0
$)
copy($0.href)
$0.href
c[1]
c.forEach(a=>addEventListener('click', xx, true))
c.forEach(a=>addEventListener('click', l, false))
c.forEach(a=>addEventListener('click', l, true))
l=()=>console.log('touch')
c.forEach(a=>addEventListener('click', l, true))
c.forEach(a=>addEventListener('click', xx, false))
c.forEach(a=>addEventListener('click', xx))
c
c.forEach(a=>addEventListener('click', l))
c.forEach(a=>addEventListener('click', l)
l=()=>console.log('touch')
c
chunk(mydata,10).forEach(a=>console.log(a))
mydata
chunk(mydata,10).forEach(a=>console.log(a))
chunk(mydata,10).forEach(a=>log(a))
chunk(mydata,10)
mydata
splitIntoChunk(mydata,10)
mydata
splitIntoChunk(mydata,10)
splitIntoChunk(mydata,14)
splitIntoChunk(mydata,4)
mydata
function splitIntoChunk(arr, chunk) {\n\n    while(arr.length > 0) {\n\n        let tempArray;\n        tempArray = arr.splice(0, chunk);\n        console.log(tempArray);\n    }\n}\n\nconst array = [1, 2, 3, 4, 5, 6, 7, 8];\nconst chunk = 2;
console.log('it works')
af(document.styleSheets)
document.styleSheets[1]
document.styleSheets[0]
document.styleSheets
myRules
let myRules = document.styleSheets[0].cssRules;
document.styleSheets[0].cssRules
document.styleSheets[0]
document.styleSheets
a
a.innerHTML
qs('head').appendChild(a)
qs('head').querySelector('link').remove()
a=qs('head').querySelector('link')
qs('head').querySelector('link')
qs('head')
window.innerWidth
window.innerHeight
window.innerHeight=20
window.innerHeight
window.innerWidth
sleep(2000).then(() => { console.log('World!'); });
function sleep(ms) {\n    return new Promise(resolve => setTimeout(resolve, ms));\n}\n
qs('head>*').querySelect('meta')
qa('head>*').querySelect('meta')
qa('head>*')
gr = `Αα\tAlpha\tΝν\tNu\nΒβ\tBeta\tΞξ\tXi\nΓγ\tGamma\tΟο\tOmicron\nΔδ\tDelta\tΠπ\tPi\nΕε\tEpsilon\tΡρ\tRho\nΖζ\tZeta\tΣσς\tSigma\nΗη\tEta\tΤτ\tTau\nΘθ\tTheta\tΥυ\tUpsilon\nΙι\tIota\tΦφ\tPhi\nΚκ\tKappa\tΧχ\tChi\nΛλ\tLambda\tΨψ\tPsi\nΜμ\tMu\tΩω\tOmega\n`.split(/\\s/).filter(x => x.length > 1)\ngr.map((ss, i) => `${i} ${ss}`)\ngr.forEach((a, i) => log([i, gr.slice(i, i + 2).join(' ')]))\n
sc = []\nfor (a = 0; a < 48; a += 2) sc.push([gr.slice(a, a + 2)].join(\" \"))\n
u = qa('[class]').map(a => a.className.trim())
u = qa('[class]').map(a => a.className.trim().split('\\s').join(' '))
u = qa('[class]').map(a => a.className.trim().split('\\s').join(' ')
u = qa('[class]').map(a => a.className.trim().split('\\s'))
u = qa('[class]').map(a => a.className.trim())
u = qa('[class]').map(a => a.className)
chunk(mydata,8)
chunk(mydata,3)
mydata
//#Source https://bit.ly/2neWfJ2 \nconst chunk = (arr, size) =>\n  Array.from({ length: Math.ceil(arr.length / size) }, (v, i) =>\n    arr.slice(i * size, i * size + size)\n  );\nconsole.log(chunk([1, 2, 3, 4, 5], 2));\n
ct(1,2)
function ct(a,b) {        console.log(a);        return a.tagName.localCompare(b.tagName);}
function ct(a,b) {        console.log(a)        return a.tagName.localCompare(b.tagName);}
mydata
elements
copy(qa('script').map(a=>a.src).filter(x=>x.length>1).join('\\n'))
qa('script').map(a=>a.src).filter(x=>x.length>1).join('\\n')
qa('script').map(a=>a.src).filter(x=>x.length>1)
qa('script').map(a=>a.src)
qa('script').forEach(a=>log(a.src))
qa('script').forEach(a=>log(a))
qa('style').forEach(a=>log(a))
qa('style')
qa('article>*').filter(x=>x.tagName.startsWith('H')).filter(y=>y.textContent.match(/^\\d/))
qa('article>*').filter(x=>x.tagName.startsWith('H')).map(z=>z.textContent).filter(y=>y.match(/^\\d/))
qa('article>*').filter(x=>x.tagName.startsWith('H')).map(z=>z.textContent).filter(y=>y.match(/\\d/))
qa('article>*').filter(x=>x.tagName.startsWith('H')).map(z=>z.textContent).filter(y=>y.match(/\\d/)
qa('article>*').filter(x=>x.tagName.startsWith('H')).map(z=>z.textContent)
qa('article>*').filter(x=>x.tagName.startsWith('H'))
qa('article>*').map(a=>a.tagName).filter(x=>x.startsWith('H'))[1]
qa('article>*').map(a=>a.tagName).filter(x=>x.startsWith('H'))
qa('article>*').map(a=>a.tagName)
qa('article>p').map(a=>a.tagName)
qa('article.article-content').map(a=>a.tagName)
qs('article.article-content').querySelectorAll('p').forEach(a=>log(a.textContent))
qs('article.article-content').querySelectorAll('p').forEach(a=>log(a.outerHTML))
qs('article.article-content').querySelectorAll('p').forEach(a=>log(a))
qs('article.article-content').querySelectorAll('p')
qs('article.article-content').querySelector('p')
qs('article.article-content').querySelector('h2')
qs('article.article-content').children
qs('article.article-content')
sword('Taking the first spot')
console.log('whahoo')
log('who')
qa('head>*')
af
qs
[...qs('head>*')]
af(qs('head>*'))
he
qs('head>*')
qs('head')
he=af(qs('head>*'))
qs('body').querySelectorAll('img').forEach(a=>a.remove())
body
copy(qs('body').innerHTML)
qs('body').outerHTML
qs('body').innerHTML
qa('img').forEach(a=>a.remove())
qa('head>*')[2].href='/auto/dist/style.css'
qa('head>*')[2].href='./auto/dist/style.css'
qa('head>*')[2].href
qa('head>*')[2].href='http://auto/dist/style.css'
qa('head>*')[2].href='http://auto\\dist\\style.css'
qa('head>*')[2]
qa('head>*')
copy(he)
he = af(qs('head').children).map(a => a.outerHTML.slice(0, 300)).join('\\n')
qs('body').style.cssText='display: grid; margin: 1rem 4rem; grid-template-columns: repeat(1, 1fr); font-family: Arial; line-height: 2; font-size: 1.5rem'
qs('body').style.cssText='display: grid; margin: 1rem 3rem; grid-template-columns: repeat(1, 1fr); font-family: Arial; line-height: 2; font-size: 1.5rem'
qs('body').style.cssText='display: grid; margin: 1rem 3rem; grid-template-columns: repeat(1, 1fr); font-family: Arial; line-height: 1.5'
qs('body').style.cssText='display: grid; margin: 1rem 3rem; grid-template-columns: repeat(1, 1fr); font-family: Arial'
qs('body').style.cssText='display: grid; margin: 1rem auto; grid-template-columns: repeat(1, 1fr); font-family: Arial'
qs('body').style.cssText='display: grid; margin: 1rem auto; grid-template-columns: repeat(2, 1fr); font-family: Arial'
qs('head>[rel]').remove()
copy(qs('head>[rel]').href)
qs('head>[rel]').href
qs('head>[rel]').src
qs('head>[rel]')
c
he
copy(he.join('\\n'))
he
qa('head>*').forEach(a=>he.push(a.outerHTML))
he=[]
copy(he[1])
copy(he)
he[1]
copy(he.join('\\n'))
he
qa('head>*').forEach(a=>he.push(a))
he=[]
qa('head>*')
document.querySelectorAll('head>*').map(a=>a.src)
qa('head>*').forEach(a=>log(a))
qa('head>*')
qa('a')
qs('a')
qa('head>link')[0].href='http://localhost:3000/junk/flex/style.css'
copy(qa('head>link')[0].href)
qa('head>link')[0].href
qa('head>link')[0]
qa('head>link').forEach(a=>log(a.href))
qa('head>link')
qa('head>*')
qa('head>[rel]').slice(0,4).forEach(a=>log(a))
qa('head>[rel*=\"s\"]').slice(0,4).forEach(a=>log(a))
qa('head>*').slice(0,4).forEach(a=>log(a))
qa('head>*').slice(0,4)
qa('head>*')[1].name
qa('head>*')[1]
qa('head>*')
qa('head'>*')
qa('head'>*)
qa('head>*').querySelector('meta')
qa('head>*')[1].querySelector('meta')
qa('head>*')[1].querySelect('meta')
qa('head>*').querySelect('meta')
qa('head>*')
qs('.poem').style.cssText=\"color: red\"
qs('.poem').style.cssText
qs('.poem')
qa('[class*=\"o\"]')
qa('[class*=\"\"]')
qa('[class*=\"oem\"]')
qa('[class*=\"oem\"]'
qs('.poem').childNodes.forEach(a=>log(a))
qs('.poem').childNodes
qs('.poem').children
qs('.poem + div')
qs('.poem')
qa('[class]')
$0.parentElement
qa('div >div')
qa('*')
qa('body *')
qa('nav *')
qa('nav')
qa('body div')
'jim'.split('').some(a=>a=='x')
'jim'.split('').some(a=>a=='i')
'jim'.split( ).some(a=>a=='i')
'jim'.split( ).every(a=>a=='i')
