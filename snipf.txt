
qa('head>*')
af
qs
[...qs('head>*')]
af(qs('head>*'))
he
qs('head>*')
qs('head')
he=af(qs('head>*'))
qs('body').querySelectorAll('img').forEach(a=>a.remove())
body
copy(qs('body').innerHTML)
qs('body').outerHTML
qs('body').innerHTML
qa('img').forEach(a=>a.remove())
qa('head>*')[2].href='/auto/dist/style.css'
qa('head>*')[2].href='./auto/dist/style.css'
qa('head>*')[2].href
qa('head>*')[2].href='http://auto/dist/style.css'
qa('head>*')[2].href='http://auto\\dist\\style.css'
qa('head>*')[2]
qa('head>*')
copy(he)
he = af(qs('head').children).map(a => a.outerHTML.slice(0, 300)).join('\\n')
qs('body').style.cssText='display: grid; margin: 1rem 4rem; grid-template-columns: repeat(1, 1fr); font-family: Arial; line-height: 2; font-size: 1.5rem'
qs('body').style.cssText='display: grid; margin: 1rem 3rem; grid-template-columns: repeat(1, 1fr); font-family: Arial; line-height: 2; font-size: 1.5rem'
qs('body').style.cssText='display: grid; margin: 1rem 3rem; grid-template-columns: repeat(1, 1fr); font-family: Arial; line-height: 1.5'
qs('body').style.cssText='display: grid; margin: 1rem 3rem; grid-template-columns: repeat(1, 1fr); font-family: Arial'
qs('body').style.cssText='display: grid; margin: 1rem auto; grid-template-columns: repeat(1, 1fr); font-family: Arial'
qs('body').style.cssText='display: grid; margin: 1rem auto; grid-template-columns: repeat(2, 1fr); font-family: Arial'
qs('head>[rel]').remove()
copy(qs('head>[rel]').href)
qs('head>[rel]').href
qs('head>[rel]').src
qs('head>[rel]')
c
he
copy(he.join('\\n'))
he
qa('head>*').forEach(a=>he.push(a.outerHTML))
he=[]
copy(he[1])
copy(he)
he[1]
copy(he.join('\\n'))
he
qa('head>*').forEach(a=>he.push(a))
he=[]
qa('head>*')
document.querySelectorAll('head>*').map(a=>a.src)
qa('head>*').forEach(a=>log(a))
qa('head>*')
qa('a')
qs('a')
qa('head>link')[0].href='http://localhost:3000/junk/flex/style.css'
copy(qa('head>link')[0].href)
qa('head>link')[0].href
qa('head>link')[0]
qa('head>link').forEach(a=>log(a.href))
qa('head>link')
qa('head>*')
qa('head>[rel]').slice(0,4).forEach(a=>log(a))
qa('head>[rel*=\"s\"]').slice(0,4).forEach(a=>log(a))
qa('head>*').slice(0,4).forEach(a=>log(a))
qa('head>*').slice(0,4)
qa('head>*')[1].name
qa('head>*')[1]
qa('head>*')
qa('head'>*')
qa('head'>*)
qa('head>*').querySelector('meta')
qa('head>*')[1].querySelector('meta')
qa('head>*')[1].querySelect('meta')
qa('head>*').querySelect('meta')
qa('head>*')
qs('.poem').style.cssText=\"color: red\"
qs('.poem').style.cssText
qs('.poem')
qa('[class*=\"o\"]')
qa('[class*=\"\"]')
qa('[class*=\"oem\"]')
qa('[class*=\"oem\"]'
qs('.poem').childNodes.forEach(a=>log(a))
qs('.poem').childNodes
qs('.poem').children
qs('.poem + div')
qs('.poem')
qa('[class]')
$0.parentElement
qa('div >div')
qa('*')
qa('body *')
qa('nav *')
qa('nav')
qa('body div')
'jim'.split('').some(a=>a=='x')
'jim'.split('').some(a=>a=='i')
'jim'.split( ).some(a=>a=='i')
'jim'.split( ).every(a=>a=='i')
'jim'.split('')
'jim'.split( )
'jim'.split()
    Object.keys(q).every((function(e) {return e}))
    Object.keys(q).every((function(e) {return e})
Object.keys(q).every((function(e) {log(e)}))
Object.keys(q).every((function(e) {log(e)})
Object.keys(q)
q=qs('body').style
q
a
Object.keys(q)
q
q=qs('body')
copy(he)
log(he)
he=qa('[src]').map(a=>a.src).join('\\n')
qa('[src]').map(a=>a.src).join('\\n')
qa('[src]').map(a=>a.src)
qa('[src]')
copy(window.location.href)
copy(qs('script').src)
qs('script').src
qs('script')
log(he)
he=af(qs('head').children).filter(a => a.tagName.match(/meta/i)).map(a => a.outerHTML.slice(0, 300)).join('\\n')
copy(he.join('\\n'))
copy(he)
he=af(qs('head').children).filter(a => a.tagName.match(/meta/i)).map(a => a.outerHTML.slice(0, 300))
he
he=af(qs('head').children).filter(a => a.tagName.match(/meta/i)).forEach(a => a.outerHTML.slice(0, 300))
copy(he)
he
he=af(qs('head').children).filter(a => a.tagName.match(/meta/i)).map(a => a.outerHTML.slice(0, 300))
he
he=af(qs('head').children).filter(a => a.tagName.match(/meta/i)).forEach(a => a.outerHTML.slice(0, 300))
he
let he=af(qs('head').children).filter(a => a.tagName.match(/meta/i)).forEach(a => log(a.outerHTML.slice(0, 300)))
he
he=af(qs('head').children).filter(a => a.tagName.match(/meta/i)).forEach(a => log(a.outerHTML.slice(0, 300)))
log(he)
he
he=af(qs('head').children).filter(a => a.tagName.match(/meta/i)).forEach(a => log(a.outerHTML.slice(0, 300)))
af(qs('head').children).filter(a => a.tagName.match(/meta/i)).forEach(a => log(a.outerHTML.slice(0, 300)))
af(qs('head').children).filter(a=>a.tagName.match(/meta/i)).forEach(a=>log(a.outerHTML.slice(0,300)))
af(qs('head').children).filter(a=>a.tagName.match(/script/i)).forEach(a=>log(a.outerHTML.slice(0,300)))
af(qs('head').children).filter(a=>a.tagName.match(/script/i))[2].outerHTML
af(qs('head').children).filter(a=>a.tagName.match(/script/i))[2].innerHTMl
af(qs('head').children).filter(a=>a.tagName.match(/script/i))[2]
af(qs('head').children).filter(a=>a.tagName.match(/script/i)).forEach(a=>log(a.innerHTML.slice(0,300)))
af(qs('head').children).filter(a=>a.tagName.match(/script/i)).forEach(a=>log(a.innerHTML.slice(0,300))
af(qs('head').children).filter(a=>a.tagName.match(/script/i)).forEach(a=>log(a.innerHTML))
af(qs('head').children).filter(a=>a.tagName.match(/script/i)).forEach(a=>log(a))
af(qs('head').children).filter(a=>a.tagName.match(/script/i)).forEach(a=>a.log(a))
af(qs('head').children).filter(a=>a.tagName.match(/script/i))
af(qs('head').children).map(a=>a.tagName)
af(qs('head').children)
af(qs('head').children).forEach(a=>log(a))
af(qs('head').children)
he
he.sort(tn)
tn=(a,b)=>{\n    a=a.tagName;\n    b=b.tagName;\n    return a> b ? 1 :-1;\n}
he.length
he.propertyIsEnumerable()
he=af(qs('head').children)
af(qs('head').children)
sfilter(qs('.home').textContent)
copy(sfilter(qs('.home').innerHTML))
sfilter = (x) => {\n    ns=x.replace(/\\s{2,}/g,'\\n')\n    return ns\n}
sfilter(qs('.home').innerHTML)
sfilter = (x) => {\n    ns=x.replace(/\\s{2,}/g,'\\n')\n    return ns\n}
sfilter(qs('.home').innerHTML)
sfilter = (x) => {\n    ns=x.replace(/\\s{2,}/g,' ')\n    return ns\n}
sfilter
sfilter(qs('.home').innerHTML)
sfilter(qs('.home').innerHTML
qs('.home').innerHTML.filter(sfilter)
sfilter = (x) => {\n    ns=x.replace(/\\s{2,}/,' ')\n    return ns\n}
qs('.home').innerHTML
qa('.home').innerHTML
qa('.home')
[20,8,6].sort((a,b)=>b-a)
[20,8,6].sort((a,b)=>a-b)
[20,8,6].sort()
cc
cc=[...cc].sort()
cc[0]='xx'
dd=cc.slice()
bb
cc=[...bb].sort(tsort)
bb
cc=[...bb.sort(tsort)]
bb
cc=[...bb.sort(tsort)]
cc=[...bb.sorted(tsort)]
cc=[...bb]
bb
bb.sort(tsort)
bb
window.bb = af(qs('*'))
bb
aa.sort(tsort)
aa=af(qa('*'))
aa.sort(tsort)
aa
b.sort(tsort)
b.sort()
\"ðŸ”’\".length
\"&#x\"+(\"ðŸ”’\".charCodeUTF32()).toString(16)+\";\"
b.forEach(xx=>log(xx.charCodeAt(0)))
b.forEach(xx=>log(xx[0].charCodeAt(0)))
b.forEach(xx=>log(xx[0]))
b.forEach(xx=>log(xx))
b.forEach(xx=>log('jim'))
b.forEach(xx=>log('jim')
b.forEach(xx=>log('jim'.charCoodeAt(0)))
b.forEach(xx=>log('jim'.charCoodeAt(0))
b
'jim'[0]
b.forEach(xx=>log(xx[0].charCoodeAt(0))
b.forEach(xx=>log(xx[0].charCoodeAt(0)))
b.forEach(xx=>log(xx.charCoodeAt(0)))
b.forEach(xx=>log(xx.charCoodeAt(0))
'C'.charCodeAt(0)
'C'.charAt(0)
b
s=Object.values('jim').map(a=>[a,a.charCodeAt(0)]).join(' ')
s=Object.values('jim').map(a=>[a,a.charCodeAt(0)]).join(' ').join('')
s=Object.values('jim').map(a=>[a,a.charCodeAt(0)]).join(' ')
s=Object.values('jim').map(a=>[a,a.charCodeAt(0)]).join('')
log(JSON.stringify(s,null,2))
JSON.stringify(s,null,2)
s=Object.values('jim').map(a=>[a,a.charCodeAt(0)])
Object.values('jim').map(a=>[a,a.charCodeAt(0)])
Object.values('jim').map(a=>a.charCodeAt(0))
Object.values('jim')
Object.entries('jim')
for (a in 'jim') log(Object.entries(a))
for (a in 'jim') log(Object.valuesOf(a))
for (a in 'jim') log(Object.valuesof(a))
for (a in 'jim') log(Object.values(a))
for (a in 'jim') log(Object.keys(a))
for (a in 'jim') log(a)
'jim'.split()
b.sort()
b
aa.sort()
arr.sort()
arr
[4,1,2,3,-2].sort()
[4,1,2,3,-2].sort(function(a,b){a-b})
[4,1,2,3].sort(function(a,b){a-b})
[1,2,3].sort(function(a,b){a-b})
[1,2,3].sort(function(a,b){b-a})
aa.sort(function(a,b){b-a})
aa.sort(function(a,b){a-b})
aa.sort(function(a,b){a-b}
aa.map(x=>x.tagName)
aa
window.window.aa=22
window.aa='x'
mylog()
aa
log()
af
log()
aa
log()
aa
setTimeout(x=>console.log('time'),100)
aa
aa=af(qa('button,head'))
aa=af(qa('button','head'))
qa('button, head')
qa('button head')
qa('button', 'head')
qa('head')
aa=af(qa('div','head'))
aa.map(a=>a.tagName)
aa
aa=af(qa('div'))
af(qa('div'))
a
a.tagName.localeCompare(b.tagName)
a.tagName
a.tagName.localeCompare(b.tagName)
b
a
a.tagName.localeCompare('s')
a
ct(he[1],he[2])
function ct(a,b) {\n        console.log(a.tagName)\n        debugger\n        return a.tagName.localCompare(b.tagName);\n}
ct(he[1],he[2])
function ct(a,b) {\n        console.log(a.tagName)\n        return a.tagName.localCompare(b.tagName);\n}
ct(he[1],he[2])
ct(he[1].tagName,he[2])
he[1].tagName
ct('a','b')
function ct(a,b) {\n        console.log(a)\n        return a.tagName.localCompare(b.tagName);\n}
ct('a','b')
function ct(a,b) {\n        console.log(a.tagName)\n        return a.tagName.localCompare(b.tagName);\n}
