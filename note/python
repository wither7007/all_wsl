good libraries
https://hackr.io/blog/best-python-libraries
import sys
original_stdout = sys.stdout # Save a reference to the original standard output
#swtich to with statment
fil=open('pf.txt', 'a')
sys.stdout = fil # Change the standard output to the file we created.
print(x)
sys.stdout =original_stdout


#!/usr/bin/python3.10

argun python libraries
https://www.youtube.com/watch?v=o06MyVhYte4

img='https://unsplash.it/1920/1080/?random'
imgdata=requests.get(img).content
open('1.jpg','wb').write(imgdata)

linux to windows
def ltow(ff):
  #linux to windows
  return ff.replace('/mnt/c/','c:\\').replace('/','\\')
  
python redirect!
import io
from contextlib import redirect_stdout

f = io.StringIO()
with redirect_stdout(f):
    inspect(rprint)
    print('\n\n')
    inspect(inspect)
woo = f.getvalue()

fil.close()

def last(x):
    return x.split('/')[-1]

for a in data:
    response=requests.get(a).content
    open(last(a), 'wb').write(response)

virtualenv env && source env/bin/activate
https://martinheinz.dev/blog/98
print(sh.awk('{print $9}', _in=sh.ls('-la')))
open('xx', 'w', encoding='utf-8').write("\n".join(data))
data = open('package.json', 'r', encoding='utf-8').read()
data = json.loads(open('package.json', 'r', encoding='utf-8').read())
data = open('song.txt', 'r', encoding='utf-8').read()
data=open('package.json', 'r', encoding='utf-8').read().strip().split('\n')
data=open('curl.html','w', encoding='utf-8').write(page)
open('xx', 'w', encoding='utf-8').write(pp)
open('xx', 'w').writelines(str(ll[c]))
open('xx', 'w', encoding='utf-8').write("\n".join(xx))
myfile=[line.strip() for line in open("new")]
data = open('package.json', 'r', encoding='utf-8').read()
j=json.loads(data)

f'{2**32:_}'
#!/usr/bin/env python
  
re.sub(r'[^a-zA-Z0-9]','',myq)

python format 

f"{3e10:,.0f}"
def fc(x):
    """
    Formats an integer with commas as thousand separators.
    """
    return f"{x:,}"

# using datetime.fromtimestamp() function to convert epoch time into datetime object  
mytimestamp = datetime.datetime.fromtimestamp( epoch_time )  
  
# using strftime() function to convert  
datetime_str=mytimestamp.strftime("%m-%d-%y%H:%M:%S")

good examples
https://github.com/x4nth055/pythoncode-tutorials
python podcast
https://realpython.com/podcasts/rpp/
python debug
https://www.youtube.com/@anthonywritescode
python debug essentials
https://martinheinz.dev/blog/82
discussion
https://stackoverflow.com/questions/34439/finding-what-methods-a-python-object-has

dict([(f'{a:03}',b) for a,b in enumerate(kk,4)])

https://stackoverflow.com/questions/3437059/does-python-have-a-string-contains-substring-method

with open('output.txt', 'w') as f:
    print(dir(datetime), file=f)

sys.stdout = open('logfile', 'w') 
sys.stdout = sys.__stdout__

write list to file
with open('myaut','w') as myaut:
    myaut.write('\n'.join(at))

datetime.now().strftime("%m/%d/%Y, %H:%M:%S")

In general: Hettinger and Arjan are petty good bets.Specifically:

https://www.youtube.com/watch?v=-J3wNP6u5YU "Naming Things in Code"

https://www.youtube.com/watch?v=t4vKPhjcMZg "What Nobody Tells You About Documentation"

https://www.youtube.com/watch?v=xKgELVmrqfs "Super Considered Super"

https://www.youtube.com/watch?v=8kTlzR4HhWo "Error Handling in the Real World"

https://www.youtube.com/watch?v=azcrPFhaY9k "How to Think Like a Programmer"

https://bobbyhadz.com/blog/python-write-list-of-tuples-to-file
list_of_tuples = [(1, 'bobby'), (2, 'hadz'), (3, 'com')]

with open('example.txt', 'w', encoding='utf-8') as f:
    f.write('\n'.join(f'{tup[0]} {tup[1]}' for tup in list_of_tuples))

import logging
logging.basicConfig(
level=logging.WARNING,
format="%(asctime)s %(levelname)s %(message)s",
datefmt="%Y-%m-%d %H:%M:%S",
filename="basic.log"
)
logging.debug("This is a debug message.")

def tt(x):
    return datetime.fromtimestamp(x.st_atime).strftime('%m-%d-%y %H:%M:%S')

import sys
import os
try:
    with open('myf', "w", encoding='utf-8') as target:
        sys.stdout = target
        inspect(cfilter,all=True)
        print('This gets redirected to nothing')
finally:
    sys.stdout = sys.__stdout__

datetime
https://www.programiz.com/python-programming/datetime/strftime
date_time.strftime("%m/%d/%Y, %H:%M:%S")
https://www.freecodecamp.org/news/python-string-to-datetime-how-to-convert-an-str-to-a-date-time-with-strptime/

Slicing:
array[start:stop:step]
https://stackoverflow.com/questions/509211/understanding-slicing

https://stackoverflow.com/questions/51777932/writing-a-factorial-function-in-one-line-in-python
factorial = lambda num: 1 if num <= 1 else num * factorial(num-1)
type(factorial)https://bobbyhadz.com/blog/python-redirect-stdout-to-nothing

https://scrapfly.io/blog/web-scraping-with-playwright-and-python/
https://stackoverflow.com/questions/73267809/run-playwright-in-interactive-mode-in-python

[''.join(inner) for inner in lst]
https://blog.finxter.com/python-list-of-lists-to-list-of-strings-how/

print('This message is shown')
ls | grep -v '*S*' | xargs mv -t target_dir/
clear move everythin but

import subprocess

def runcmd(cmd, verbose = False, *args, **kwargs):

    process = subprocess.Popen(
        cmd,
        stdout = subprocess.PIPE,
        stderr = subprocess.PIPE,
        text = True,
        shell = True
    )
    std_out, std_err = process.communicate()
    if verbose:
        print(std_out.strip(), std_err)
    pass

runcmd('echo "Hello, World!"', verbose = True)
runcmd(ww, verbose = True)

alist = [line.rstrip() for line in open('filename.txt')]
:redir @a
:set all
:redir END

ne = [line for line in content if line.strip() != ""]

def sum(x, y):
    return x+y
sum(1, 2)
In the example, x and y are the parameters, while1 and 2 are the arguments.


import re

class redirect_output(object):
    """context manager for reditrecting stdout/err to files"""


    def __init__(self, stdout='', stderr=''):
        self.stdout = stdout
        self.stderr = stderr

    def __enter__(self):
        self.sys_stdout = sys.stdout
        self.sys_stderr = sys.stderr

        if self.stdout:
            sys.stdout = open(self.stdout, 'w')
        if self.stderr:
            if self.stderr == self.stdout:
                sys.stderr = sys.stdout
            else:
                sys.stderr = open(self.stderr, 'w')

    def __exit__(self, exc_type, exc_value, traceback):
        sys.stdout = self.sys_stdout
        sys.stderr = self.sys_stderr

p = re.compile('^.+-.+-.+$')
l1 = ["AB.22-01-01", "AB.33-01-44", "--4", "AA.44--05", "--"]
l2 = [ s for s in l1 if p.match(s) ]




import datetime
import os

# Path to the file
path = r"x.pdf"

# file modification timestamp of a file
m_time = os.path.getmtime(path)
# convert timestamp into DateTime object
dt_m = datetime.datetime.fromtimestamp(m_time)
print('Modified on:', dt_m)

# file creation timestamp in float
c_time = os.path.getctime(path)
# convert creation timestamp into DateTime object
dt_c = datetime.datetime.fromtimestamp(c_time)
print('Created on:', dt_c)



Function                   Vi         Emacs
-------------------------------------------
Back to indentation        ^          M-m
Bottom of history          G          M-<
Clear selection            Esc        C-g
Copy selection             Enter      M-w
Cursor down                j          Down
Cursor left                h          Left
Cursor right               l          Right
Cursor to bottom line      L     
Cursor to middle line      M          M-r
Cursor to top line         H          M-R
Cursor up                  k          Up
Delete entire line         d          C-u
Delete/Copy to end of line D          C-k
End of line                $          C-e
Go to line                 :          g
Half page down             C-d        M-Down
Half page up               C-u        M-Up
Jump forward               f          f
Jump backward              F          F
Jump again                 ;          ;
Jump again in reverse      ,          ,
Next page                  C-f        PgDown
Next space                 W
Next space, end of word    E
Next word                  w
Next word end              e          M-f
Paste buffer               p          C-y
Previous page              C-b        PgUp
Previous word              b          M-b
Previous space             B
Quit mode                  q          Esc
Rectangle toggle           v          R
Scroll down                C-Down/C-e C-Down
Scroll up                  C-Up/C-y   C-Up
Search again               n          n
Search again in reverse    N          N
Search backward            ?          C-r
Search forward             /          C-s
SFunction                   Vi         Emacs
-------------------------------------------
Back to indentation        ^          M-m
Bottom of history          G          M-<
Clear selection            Esc        C-g
Copy selection             Enter      M-w
Cursor down                j          Down
Cursor left                h          Left
Cursor right               l          Right
Cursor to bottom line      L     
Cursor to middle line      M          M-r
Cursor to top line         H          M-R
Cursor up                  k          Up
Delete entire line         d          C-u
Delete/Copy to end of line D          C-k
End of line                $          C-e
Go to line                 :          g
Half page down             C-d        M-Down
Half page up               C-u        M-Up
Jump forward               f          f
Jump backward              F          F
Jump again                 ;          ;
Jump again in reverse      ,          ,
Next page                  C-f        PgDown
Next space                 W
Next space, end of word    E
Next word                  w
Next word end              e          M-f
Paste buffer               p          C-y
Previous page              C-b        PgUp
Previous word              b          M-b
Previous space             B
Quit mode                  q          Esc
Rectangle toggle           v          R
Scroll down                C-Down/C-e C-Down
Scroll up                  C-Up/C-y   C-Up
Search again               n          n
Search again in reverse    N          N
Search backward            ?          C-r
Search forward             /          C-s
Start of line              0          C-a
Start selection            Space      C-Space
Top of history             g          M->
Transpose chars            C-ttart of line              0          C-a
Start selection            Space      C-Space
Top of history             g          M->
Transpose chars            C-t
